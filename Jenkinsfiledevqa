pipeline {
    agent any
    tools {
        maven 'mvn39'        
    }
    environment {
        NAMESPACE = 'default'
        BASE_VERSION_FILE = "${params.BRANCH}/baseversion.txt"
        BUILD_VERSION_FILE = "${params.BRANCH}/buildversion.txt"
        BUILD_NUMBER_FILE = "${params.BRANCH}/buildNumber.txt"
        MODULE = "test"
    }

    stages {
        stage('Maven Build') {
            steps {
                script {
                    
                        sh '''                            
                            ls -la
                        '''
                       }
            }
        }
        stage('Initialize') {
            steps {
                script {
                    // Read the version from pom.xml
                    def pomVersion = sh(script: 'xmllint --xpath "//*[local-name()=\'project\']/*[local-name()=\'version\']/text()" pom.xml', returnStdout: true).trim()
                    echo "POM version: ${pomVersion}"
                    
                    // Check if the base version file exists
                    def baseVersionFile = "${WORKSPACE}/${BASE_VERSION_FILE}"
                    def baseVersion
               	    // Read the branch parameter
		    def branchParameter = params.BRANCH

		    if (!fileExists(baseVersionFile)) {
			    if (branchParameter == 'develop') {
				// For the first build on the main branch, set the base version to '1.0.1.1'
				echo "Initializing base version to '1.0.1.1' for the main branch..."
				baseVersion = '1.0.1.1'
			    } else if(branchParameter == 'qa') {
				// For the first build on non-main branches, set the base version to the version in pom.xml
				echo "Initializing base version to '${pomVersion}'..."
				baseVersion = pomVersion
			    }
		    } else {
			    // For subsequent builds, read the base version from the file
			    baseVersion = readFile(baseVersionFile).trim()
			    echo "Base version read from file: ${baseVersion}"
		    }
        
                    baseVersion = baseVersion.replaceAll('-SNAPSHOT', '')
                    echo "Base version: ${baseVersion}"
                    // Remove the '-SNAPSHOT' suffix
                    

                    // Split the version string using dot as a delimiter
                    def (currentMajor, currentMinor, currentPatch, currentBuild) = pomVersion.split('\\.')

                    // Now you can use the individual version components in your pipeline
                    echo "Major Version: ${currentMajor}"
                    echo "Minor Version: ${currentMinor}"
                    echo "Patch Version: ${currentPatch}"
                    echo "Build Number: ${currentBuild ?: 'Not found'}"
                    def buildNumber
                        
                    if (fileExists(BUILD_NUMBER_FILE)) {
                        buildNumber = readFile(BUILD_NUMBER_FILE).trim()
                    } else {
                        buildNumber = currentBuild
                        echo "Buildnumber:${buildNumber}"
                    }
    
                   
                    // Set the build number as an environment variable
                    env.BUILD_NUMBER = buildNumber
                    // Set the base version in the environment
                    env.BASE_VERSION = baseVersion
                    echo "Base version: ${baseVersion}"

                    // Write the base version back to the file for subsequent builds
                    writeFile file: baseVersionFile, text: baseVersion
                    echo "Base version updated in ${BASE_VERSION_FILE}"
                }
            }
        }

        stage('Increment Version and Build based on build') {
            steps {
                script {
                    def pomVersion = sh(script: 'xmllint --xpath "//*[local-name()=\'project\']/*[local-name()=\'version\']/text()" pom.xml', returnStdout: true).trim()
                    echo "POM version: ${pomVersion}"

                      // Read the base version from the environment
                    def baseVersionFile = "${WORKSPACE}/${BASE_VERSION_FILE}"
                    def baseVersion = env.BASE_VERSION
                    echo "Base version: ${baseVersion}"
		    // Get the contents of pom.xml from the specified branch
                    def pomXmlContentdev = sh(script: "git show origin/develop:pom.xml", returnStdout: true).trim()
                    // Extract version from pom.xml using grep and cut
                    def pomVersiondev = sh(script: "echo '${pomXmlContentdev}' | grep -o '<version>.*</version>' | cut -d'>' -f2 | cut -d'<' -f1 | sed -n 2p", returnStdout: true).trim()
                    echo "POM Version develop: ${pomVersiondev}"

                    // Increment the version based on the release type
                    def newVersion
                    def releaseType = params.releaseType
                    echo "Release type is: ${releaseType}"
		    // Get the branch name from the choice parameter
                    def branchName = params.BRANCH
                    echo "Branch is: ${branchName}"
                            // Split the version string using dot as a delimiter
                    def (preMajor, preMinor, prePatch, present2Build) = pomVersion.split('\\.')
                    def (inibaseMajor, inibaseMinor, inibasePatch,inibaseBuild) = baseVersion.split('\\.')
                    if (releaseType == 'initialbuild' && branchName == 'develop' && (baseVersion == pomVersion && pomVersion == '1.0.1.1')) {  
                        newVersion = "${preMajor}.${preMinor}.${prePatch}.${present2Build}"
                        echo "New version: ${newVersion}"
		    }else if (releaseType == 'initialbuild' && branchName == 'qa' && baseVersion == pomVersion && pomVersiondev==baseVersion) { 
                        newVersion = "${preMajor}.${preMinor}.${prePatch}.${present2Build}"
                        echo "New version: ${newVersion}"
                    
                    } else if (releaseType == 'build') {   
        
                        // Parse major, minor, patch, and build numbers from the base version
                        def baseMajor = inibaseMajor.toInteger()
                        def baseMinor = inibaseMinor.toInteger()
                        def basePatch = inibasePatch.toInteger()
                        def baseBuild = inibaseBuild.toInteger()
                        def buildNumber
                        
                    if (fileExists(BUILD_NUMBER_FILE)) {
                        buildNumber = readFile(BUILD_NUMBER_FILE).trim()
                    } else {
                        buildNumber = inibaseBuild
                        echo "Buildnumber:${buildNumber}"
                    }        
                        // Parse major, minor, patch, and build numbers from the current version
                        def currentMajor = preMajor.toInteger()
                        def currentMinor = preMinor.toInteger()
                        def currentPatch = prePatch.toInteger()
                        def currentBuild = present2Build.toInteger()
        
                        if ((currentMajor > baseMajor || currentMinor > baseMinor || currentPatch > basePatch) && present2Build.toInteger() == 1) {
                            buildNumber = '1'
                            newVersion = "${currentMajor}.${currentMinor}.${currentPatch}"
                            echo "New version: ${newVersion}"
                        } else if (currentMajor == baseMajor && currentMinor == baseMinor && currentPatch == basePatch && present2Build.toInteger() == inibaseBuild.toInteger() + 1) {
                            // Increment the build number
                            buildNumber = (baseBuild + 1).toString()
                            newVersion = "${currentMajor}.${currentMinor}.${currentPatch}"
                            echo "New version: ${newVersion}"
                        } else {
                            // Reject the build
                            error "Build rejected: Current version is less than the base version"
                        }
        
                        // Set the build number in the environment
                        env.BUILD_NUMBER = buildNumber
                        echo "Build number: ${buildNumber}"
        
                        // Append build number to the current version for 'build' release type
                        newVersion = "${newVersion}.${env.BUILD_NUMBER}"
                        echo "New version: ${newVersion}"
        
                        // Write the updated build number to the file
                        writeFile file: BUILD_NUMBER_FILE, text: buildNumber
                    } else {
                        error "Invalid release type or mismatch with the base version. Stopping the pipeline."
                    }
        
                    // Set the base version in the environment
                    env.BASE_VERSION = newVersion
                    echo "Base version: ${baseVersion}"
        
                    // Write newVersion to build_version.txt
                    def buildVersionFile = "${WORKSPACE}/build_version.txt"
                    writeFile file: buildVersionFile, text: newVersion
                    writeFile file: baseVersionFile, text: newVersion
                    echo "New version written to ${buildVersionFile}"
                                    
                    }
                }
            }          
                  
      
    }
}
